from enaml_nodegraph import install
install()

from enaml.core.api import Looper
from enaml.core.api import Include
from enaml.layout.api import (vbox, hbox, align, spacer, grid,
                              AreaLayout, HSplitLayout, VSplitLayout, TabLayout, InsertItem)

from enaml.widgets.api import MainWindow, Window, Container, Field, Label
from enaml.widgets.api import MenuBar, Menu, Action, ActionGroup, PushButton
from enaml.widgets.api import DockPane, DockArea, DockItem
from enaml.widgets.ipython_console import IPythonConsole

from enaml.stdlib.message_box import question


from enaml_nodegraph.widgets.graphicsview import GraphicsView
from enaml_nodegraph.widgets.node_graphicsscene import NodeGraphicsScene

from graph_item_widgets import NodeAttributeEditorPanel

def confirm_close(window, event):
    button = question(
        window, 'Example Application', 'Are you sure you want to quit?'
    )
    if button and button.action == 'accept':
        event.accept()
    else:
        event.ignore()


def deleteSelectedItems(controller, items):
    from enaml_nodegraph.widgets.node_item import NodeItem
    from enaml_nodegraph.widgets.edge_item import EdgeItem
    for item in items:
        if isinstance(item, NodeItem):
            controller.destroy_node(item.id)
        elif isinstance(item, EdgeItem):
            controller.destroy_edge(item.id)


enamldef DebugConsole(Window):
    attr view
    attr scene

    title << 'Debug'
    Container:
        padding = (0, 0, 0, 0)
        alias ipy
        constraints = [vbox(ipy, spacing=3)]

        IPythonConsole: ipy:
            initial_ns = {"view": view, "scene": scene}


def getAttributeEditorView(controller, selectedNodes, parent):
    if len(selectedNodes) == 0:
        return [Label(text='Nothing Selected')]

    node_views = []
    for node in selectedNodes:
        typename = controller.registry.node_widget_class_name_map.get(type(node), None)
        if typename is None:
            continue
        view_cls = controller.registry.node_type_name_map[typename].editor_class
        node_views.append([node.name, [view_cls(attributes=node.model.attributes)]])

    return [NodeAttributeEditorPanel(node_views=node_views)]


enamldef Main(MainWindow): mainwindow:

    attr controller

    title = 'Nodegraph Test'
    closing :: confirm_close(self, change['value'])


    MenuBar:
        Menu:
            title = '&File'
            Action:
                text = 'Quit Editor\tCtrl+Q'
                triggered :: mainwindow.close()
        Menu:
            title = '&Edit'
            Action:
                text = 'Cut\tCtrl+X'
                triggered :: deleteSelectedItems(controller, view1.selectedItems)

        Menu:
            title = '&Tools'
            Action:
                text = 'Debug Console\tCtrl+D'
                triggered ::
                    win = DebugConsole(view=view1, scene=scene)
                    win.show()

        Menu:
            title = '&Nodes'
            Looper: menu_looper:
                iterable << controller.registry.node_types
                Action:
                    text = 'Add %s\tCtrl+%d' % (loop_item.name, loop_index+1)
                    triggered :: controller.create_node(loop_item.id)

    Container: gvc:
        padding = 0
        DockArea:
            layout = AreaLayout(
                HSplitLayout(
                    'node-editor-view',
                    VSplitLayout('create-node-view',
                                 'item-attribute-view',
                                 sizes=[1,1]),
                    sizes=[3, 1],
                ),
            )
            DockItem:
                name = 'node-editor-view'
                title = 'NodeGraph Editor'
                stretch = 1
                Container:
                    padding = 0
                    minimum_size = (800, 600)
                    GraphicsView: view1:
                        controller = mainwindow.controller
                        NodeGraphicsScene: scene:
                            background = "#393939"
                            color_light = "#2f2f2f"
                            color_dark = "#292929"
            DockItem:
                name = 'create-node-view'
                title = 'Create Node'
                stretch = 1
                Container:
                    Looper: button_looper:
                        iterable << controller.registry.node_types
                        PushButton:
                            text = loop_item.name
                            clicked :: controller.create_node(loop_item.id)

            DockItem: iav_item:
                name = 'item-attribute-view'
                title = 'Attribute Editor'
                stretch = 1
                Container: iav_container:
                    Include: attr_editor_inc:
                        objects << getAttributeEditorView(controller, controller.selectedNodes, iav_container)
