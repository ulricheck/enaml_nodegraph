from atom.api import Atom, Bool, Int, Float, List, Typed, observe

from enaml.widgets.api import (Container, Field, SpinBox, ObjectCombo, Slider,
                               Timer, Form, Label, CheckBox, MPLCanvas)

from enaml.layout.api import vbox, hbox, align, spacer, grid

import matplotlib.pyplot as plt
import numpy as np

from enaml_nodegraph.widgets.node_item import NodeItem
from enaml_nodegraph.widgets.node_content import NodeContent
from enaml_nodegraph.widgets.node_socket import NodeSocket, SocketPosition, SocketType
from enaml_nodegraph.widgets.edge_item import EdgeItem, EdgeType


def enum_labels(model, attr):
    """ Return the list of enum labels for the given model and attr.

    """
    items = getattr(type(model), attr).items
    return sorted(items)


enamldef NumberInput(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"
    height = 90

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.OUTPUT
        socket_position = SocketPosition.RIGHT_BOTTOM

    NodeContent:
        Container:
            padding = (0, 0, 0, 0)
            SpinBox: sbox:
                maximum = 1000
                minimum = 0
                value >> node.model.value

enamldef SliderInput(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"
    height = 90

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.OUTPUT
        socket_position = SocketPosition.RIGHT_BOTTOM

    NodeContent:
        Container:
            padding = (0, 0, 0, 0)
            Slider: slider:
                tick_interval = 5
                maximum = 1000
                minimum = 1
                value >> node.model.value


class RampController(Atom):

    model = Typed(Atom)
    timer = Typed(Timer)

    is_running = Bool(False)
    interval = Int(500)
    min_value = Int(0)
    max_value = Int(100)
    value = Int(0)

    def _default_value(self):
        return self.min_value

    def _observe_is_running(self, change):
        if change['value']:
            self.timer.start()
        else:
            self.timer.stop()

    def reset(self):
        self.value = self.min_value

    def step(self):
        if self.value < self.max_value:
            self.value += 1
        else:
            self.value = self.min_value

    def _observe_value(self, change):
        self.model.value = self.value


enamldef RampGenerator(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"
    width = 200
    height = 200

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.OUTPUT
        socket_position = SocketPosition.RIGHT_BOTTOM

    NodeContent:
        Container:
            padding = (0, 0, 0, 0)
            attr ramp_ctrl = RampController(model=node.model, timer=t_shoot)
            Form:
                Label:
                    text = 'Running'
                CheckBox: cb_running:
                    checked := ramp_ctrl.is_running
                Label:
                    text = 'Interval'
                SpinBox: n_interval:
                    maximum = 1000
                    minimum = 50
                    value := ramp_ctrl.interval
                Label:
                    text = 'Min Value'
                SpinBox: n_min_value:
                    maximum = 1000
                    minimum = 0
                    value := ramp_ctrl.min_value
                Label:
                    text = 'Max Value'
                SpinBox: n_max_value:
                    maximum = 1000
                    minimum = 0
                    value := ramp_ctrl.max_value
                Timer: t_shoot:
                    interval := ramp_ctrl.interval
                    timeout :: ramp_ctrl.step()


enamldef NumberOutput(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"
    height = 90

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.INPUT
        socket_position = SocketPosition.LEFT_TOP

    NodeContent:
        Container:
            padding = (0, 0, 0, 0)
            Field: display:
                read_only = True
                text << str(node.model.value)

enamldef BinaryOperator(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"
    height = 90

    NodeSocket:
        index = 0
        id = "in1"
        socket_type = SocketType.INPUT
        socket_position = SocketPosition.LEFT_TOP
    NodeSocket:
        index = 1
        id = "in2"
        socket_type = SocketType.INPUT
        socket_position = SocketPosition.LEFT_TOP

    NodeSocket:
        index = 0
        id = "result"
        socket_type = SocketType.OUTPUT
        socket_position = SocketPosition.RIGHT_TOP

    NodeContent:
        Container:
            padding = (0, 0, 0, 0)
            ObjectCombo: operator:
                items = enum_labels(node.model, "operator")
                selected := node.model.operator


class FigureRenderer(Atom):

    model = Typed(Atom)

    figure = Typed(plt.Figure)
    line = Typed(plt.Line2D)

    max_entries = Int(500)
    values = List(Int())

    def _default_figure(self):
        return plt.Figure()

    def _default_line(self):
        return self.figure.add_subplot(111).plot([],[])[0]

    def consume_value(self, change):
        start_idx = max(0, len(self.values)-self.max_entries+1)
        val = self.values[start_idx:]
        val.append(change['value'])
        self.values = val

    def _observe_values(self, change):
        values = np.array(change['value'])
        l = len(values)
        if l > 0:
            self.line.set_xdata(range(l))
            self.line.set_ydata(values)

            ax = self.line.axes
            ax.set_xlim([0, l])
            ax.set_ylim([values.min(), values.max()])

            self.figure.canvas.draw()
            self.figure.canvas.flush_events()


enamldef GraphOutput(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"
    width = 300
    height = 300

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.INPUT
        socket_position = SocketPosition.LEFT_TOP

    NodeContent:
        Container:
            padding = (0, 0, 0, 0)
            attr fig_ctrl = FigureRenderer(model=node.model)
            initialized :: node.model.observe('value', fig_ctrl.consume_value)

            Container:
                padding = (0, 0, 0, 0)
                constraints = [
                    vbox(frm, canvas),
                    canvas.width <= 250,
                    canvas.height <= 200,
                ]
                Form: frm:
                    Label:
                        text = 'Max Entries'
                    SpinBox: n_max_entries:
                        maximum = 1000
                        minimum = 1
                        value := fig_ctrl.max_entries
                MPLCanvas: canvas:
                    figure << fig_ctrl.figure


enamldef Edge(EdgeItem):
    color_default = "#001000FF"
    color_selected = "#00FF00FF"
    line_width = 3.0
    edge_type = EdgeType.EDGE_TYPE_BEZIER
    edge_roundness = 100

