from atom.api import Atom, Bool, Int, Float, List, Typed, observe

from enaml.core.api import Looper, Include
from enaml.widgets.api import (Container, Field, SpinBox, ObjectCombo, Slider,
                               Timer, Form, Label, CheckBox, GroupBox, MPLCanvas,
                               Menu, Action)

from enaml.layout.api import vbox, hbox, align, spacer, grid

import matplotlib.pyplot as plt
import numpy as np

from enaml_nodegraph.widgets.node_item import NodeItem
from enaml_nodegraph.widgets.node_content import NodeContent
from enaml_nodegraph.widgets.node_socket import NodeSocket, SocketPosition, SocketType
from enaml_nodegraph.widgets.edge_item import EdgeItem, EdgeType


def enum_labels(model, attr):
    """ Return the list of enum labels for the given model and attr.

    """
    items = getattr(type(model), attr).items
    return sorted(items)


enamldef NodePopupMenu(Menu):
    context_menu = True
    attr node
    Action:
        text = 'Delete Node'
        triggered :: node.destroy()


enamldef EdgePopupMenu(Menu):
    context_menu = True
    attr edge
    Action:
        text = 'Delete Edge'
        triggered :: edge.destroy()


enamldef NodeAttributeEditorPanel(Container):
    padding = 0
    attr node_views
    Looper:
        iterable << node_views
        GroupBox:
            title = loop_item[0]
            Include:
                objects << loop_item[1]


enamldef NumberInputEditor(Container):
    attr attributes
    padding = (0, 0, 0, 0)
    Form:
        Label:
            text = 'Value'
        SpinBox: sbox:
            maximum = 1000
            minimum = 0
            value >> attributes.value


enamldef NumberInput(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"

    context_menu_event :: NodePopupMenu(node=node).popup()

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.OUTPUT
        socket_position = SocketPosition.RIGHT_BOTTOM


enamldef SliderInputEditor(Container):
    attr attributes
    padding = (0, 0, 0, 0)
    Form:
        Label:
            text = 'Value'
        Slider: slider:
            tick_interval = 5
            maximum = 1000
            minimum = 1
            value >> attributes.value


enamldef SliderInput(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"

    context_menu_event :: NodePopupMenu(node=node).popup()

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.OUTPUT
        socket_position = SocketPosition.RIGHT_BOTTOM


class RampController(Atom):

    model = Typed(Atom)
    timer = Typed(Timer)

    def control_timer(self, change):
        if change['value']:
            self.timer.start()
        else:
            self.timer.stop()

    def reset(self):
        self.model.value = self.model.attributes.min_value

    def step(self):
        if self.model.value < self.model.attributes.max_value:
            self.model.value += 1
        else:
            self.model.value = self.model.attributes.min_value


enamldef RampGeneratorEditor(Container):
    attr attributes
    padding = (0, 0, 0, 0)
    Form:
        Label:
            text = 'Running'
        CheckBox: cb_running:
            checked := attributes.is_running
        Label:
            text = 'Interval'
        SpinBox: n_interval:
            maximum = 1000
            minimum = 50
            value := attributes.interval
        Label:
            text = 'Min Value'
        SpinBox: n_min_value:
            maximum = 1000
            minimum = 0
            value := attributes.min_value
        Label:
            text = 'Max Value'
        SpinBox: n_max_value:
            maximum = 1000
            minimum = 0
            value := attributes.max_value


enamldef RampGenerator(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"

    attr ramp_ctrl = RampController(model=node.model, timer=t_shoot)

    initialized :: model.attributes.observe('is_running', ramp_ctrl.control_timer)

    context_menu_event :: NodePopupMenu(node=node).popup()

    Timer: t_shoot:
        interval := node.model.attributes.interval
        timeout :: ramp_ctrl.step()

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.OUTPUT
        socket_position = SocketPosition.RIGHT_BOTTOM


enamldef NumberOutputEditor(Container):
    attr attributes
    padding = (0, 0, 0, 0)
    Form:
        Label:
            text = 'Value'
        Field: display:
            read_only = True
            text << str(attributes.value)


enamldef NumberOutput(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212100E3"

    context_menu_event :: NodePopupMenu(node=node).popup()

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.INPUT
        socket_position = SocketPosition.LEFT_TOP


class FigureRenderer(Atom):

    figure = Typed(plt.Figure)
    line = Typed(plt.Line2D)

    def _default_figure(self):
        return plt.Figure()

    def _default_line(self):
        return self.figure.add_subplot(111).plot([],[])[0]

    def redraw_figure(self, change):
        values = np.array(change['value'])
        l = len(values)
        if l > 0:
            self.line.set_xdata(range(l))
            self.line.set_ydata(values)

            ax = self.line.axes
            ax.set_xlim([0, l])
            ax.set_ylim([values.min(), values.max()])

            self.figure.canvas.draw()
            self.figure.canvas.flush_events()


enamldef GraphOutputEditor(Container):
    attr attributes
    padding = (0, 0, 0, 0)
    attr fig_ctrl = FigureRenderer()
    initialized :: attributes.observe('values', fig_ctrl.redraw_figure)

    Container:
        padding = (0, 0, 0, 0)
        constraints = [
            vbox(frm, canvas),
            canvas.width <= 250,
            canvas.height <= 200,
        ]
        Form: frm:
            Label:
                text = 'Max Entries'
            SpinBox: n_max_entries:
                maximum = 1000
                minimum = 1
                value := attributes.max_entries
        MPLCanvas: canvas:
            figure << fig_ctrl.figure


enamldef GraphOutput(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212100E3"

    context_menu_event :: NodePopupMenu(node=node).popup()

    NodeSocket:
        index = 0
        id = "value"
        socket_type = SocketType.INPUT
        socket_position = SocketPosition.LEFT_TOP



enamldef BinaryOperatorEditor(Container):
    attr attributes
    padding = (0, 0, 0, 0)
    Form:
        Label:
            text = 'Operator'
        ObjectCombo: operator:
            items = enum_labels(attributes, "operator")
            selected := attributes.operator


enamldef BinaryOperator(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#210021E3"

    context_menu_event :: NodePopupMenu(node=node).popup()

    NodeSocket:
        index = 0
        id = "in1"
        socket_type = SocketType.INPUT
        socket_position = SocketPosition.LEFT_TOP
    NodeSocket:
        index = 1
        id = "in2"
        socket_type = SocketType.INPUT
        socket_position = SocketPosition.LEFT_TOP

    NodeSocket:
        index = 0
        id = "result"
        socket_type = SocketType.OUTPUT
        socket_position = SocketPosition.RIGHT_BOTTOM


enamldef Edge(EdgeItem): edge:
    color_default = "#001000FF"
    color_selected = "#00FF00FF"
    line_width = 3.0
    edge_type = EdgeType.EDGE_TYPE_BEZIER
    edge_roundness = 100

    context_menu_event :: EdgePopupMenu(edge=edge).popup()

