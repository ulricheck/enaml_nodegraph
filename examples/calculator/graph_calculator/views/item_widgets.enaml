from atom.api import Atom, Bool, Int, Float, Str, Unicode, List, Typed, observe

from enaml.core.api import Looper, Include
from enaml.widgets.api import (Container, Field, SpinBox, ObjectCombo, Slider,
                               Timer, Form, Label, CheckBox, Menu, Action)

from enaml.layout.api import vbox, hbox, align, spacer, grid

from enaml_nodegraph.widgets.node_item import NodeItem
from enaml_nodegraph.widgets.node_content import NodeContent
from enaml_nodegraph.widgets.node_socket import NodeSocket, SocketPosition, SocketType
from enaml_nodegraph.widgets.edge_item import EdgeItem, EdgeType


TYPE_COLOR_MAP = {
    'int': "#0077FFFF",
    'float': "#FF7700FF",
    'text': "#FF0077FF",
}



enamldef NodePopupMenu(Menu):
    context_menu = True
    attr node
    Action:
        text = 'Delete Node'
        triggered :: node.destroy()


enamldef EdgePopupMenu(Menu):
    context_menu = True
    attr edge
    Action:
        text = 'Delete Edge'
        triggered :: edge.destroy()


enamldef AutoNode(NodeItem): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"

    attr type_name

    context_menu_event :: NodePopupMenu(node=node).popup()
    Looper:
        iterable << node.model.outputs
        NodeSocket:
            index = loop_index
            id = loop_item.name
            color_background = TYPE_COLOR_MAP[loop_item.data_type]
            socket_type = SocketType.OUTPUT
            socket_position = SocketPosition.RIGHT_BOTTOM

    Looper:
        iterable << node.model.inputs
        NodeSocket:
            index = loop_index
            id = loop_item.name
            color_background = TYPE_COLOR_MAP[loop_item.data_type]
            socket_type = SocketType.INPUT
            socket_position = SocketPosition.LEFT_TOP


class RampController(Atom):

    model = Typed(Atom)
    timer = Typed(Timer)

    def control_timer(self, change):
        if change['value']:
            self.timer.start()
        else:
            self.timer.stop()

    def teardown(self, change):
        if not change['value']:
            self.timer.stop()

    def reset(self):
        self.model.value = self.model.attributes.min_value

    def step(self):
        if self.model.value < self.model.attributes.max_value:
            self.model.value += 1
        else:
            self.model.value = self.model.attributes.min_value


enamldef RampGenerator(AutoNode): node:
    color_default = "#0000007F"
    color_selected = "#FFA637FF"
    color_title = "#AAAAAAFF"
    color_title_background = "#313131FF"
    color_background = "#212121E3"

    attr ramp_ctrl = RampController(model=node.model, timer=t_shoot)

    initialized ::
        model.attributes.observe('is_running', ramp_ctrl.control_timer)
        controller.observe('is_active', ramp_ctrl.teardown)

    context_menu_event :: NodePopupMenu(node=node).popup()

    Timer: t_shoot:
        interval := node.model.attributes.interval
        timeout :: ramp_ctrl.step()


enamldef Edge(EdgeItem): edge:
    color_default << TYPE_COLOR_MAP.get(model.start_socket.data_type if model.start_socket else None, "#001000FF")
    color_selected = "#00FF00FF"
    line_width = 3.0
    edge_type = EdgeType.EDGE_TYPE_BEZIER
    edge_roundness = 100

    context_menu_event :: EdgePopupMenu(edge=edge).popup()

